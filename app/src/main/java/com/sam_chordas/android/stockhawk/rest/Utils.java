package com.sam_chordas.android.stockhawk.rest;import android.content.ContentProviderOperation;import android.content.Context;import android.util.Log;import com.sam_chordas.android.stockhawk.data.QuoteColumns;import com.sam_chordas.android.stockhawk.data.QuoteProvider;import com.squareup.okhttp.OkHttpClient;import com.squareup.okhttp.Request;import com.squareup.okhttp.Response;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.net.URLEncoder;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.Locale;import java.util.TimeZone;/** * Created by sam_chordas on 10/8/15. */public class Utils {    private static String LOG_TAG = Utils.class.getSimpleName();    public static boolean showPercent = true;    public static ArrayList<ContentProviderOperation> quoteJsonToContentVals(Context context, String JSON) {        ArrayList<ContentProviderOperation> batchOperations = new ArrayList<>();        JSONObject jsonObject = null;        JSONArray resultsArray = null;        Log.i(LOG_TAG, "GET FB: " + JSON);        try {            jsonObject = new JSONObject(JSON);            if (jsonObject != null && jsonObject.length() != 0) {                jsonObject = jsonObject.getJSONObject("query");                int count = Integer.parseInt(jsonObject.getString("count"));                if (count == 1) {                    jsonObject = jsonObject.getJSONObject("results")                            .getJSONObject("quote");                    ContentProviderOperation contentProviderOperation = buildBatchOperation(jsonObject);                    if (contentProviderOperation != null && contentProviderOperation.getUri() != null) {                        batchOperations.add(contentProviderOperation);                    }                } else {                    resultsArray = jsonObject.getJSONObject("results").getJSONArray("quote");                    if (resultsArray != null && resultsArray.length() != 0) {                        for (int i = 0; i < resultsArray.length(); i++) {                            jsonObject = resultsArray.getJSONObject(i);                            batchOperations.add(buildBatchOperation(jsonObject));                        }                    }                }            }        } catch (JSONException e) {            Log.e(LOG_TAG, "String to JSON failed: " + e);        }        return batchOperations;    }    public static String truncateBidPrice(String bidPrice) {        if (bidPrice == null) return "0.0";        try {            bidPrice = String.format("%.2f", Float.parseFloat(bidPrice));        } catch (NumberFormatException e) {            bidPrice = "0.0";        }        return bidPrice;    }    public static String truncateChange(String change, boolean isPercentChange) {        String weight = change.substring(0, 1);        String ampersand = "";        if (isPercentChange) {            ampersand = change.substring(change.length() - 1, change.length());            change = change.substring(0, change.length() - 1);        }        change = change.substring(1, change.length());        try {            double round = (double) Math.round(Double.parseDouble(change) * 100) / 100;            change = String.format("%.2f", round);            StringBuffer changeBuffer = new StringBuffer(change);            changeBuffer.insert(0, weight);            changeBuffer.append(ampersand);            change = changeBuffer.toString();        } catch (NumberFormatException e) {            change = "0.0";        }        return change;    }    public static ContentProviderOperation buildBatchOperation(JSONObject jsonObject) {        ContentProviderOperation.Builder builder = ContentProviderOperation.newInsert(                QuoteProvider.Quotes.CONTENT_URI);        try {            String change = jsonObject.getString("Change");            String bidPrice = truncateBidPrice(jsonObject.getString("Bid"));            builder.withValue(QuoteColumns.SYMBOL, jsonObject.getString("symbol"));            builder.withValue(QuoteColumns.BIDPRICE, bidPrice);            builder.withValue(QuoteColumns.PERCENT_CHANGE, truncateChange(                    jsonObject.getString("ChangeinPercent"), true));            builder.withValue(QuoteColumns.CHANGE, truncateChange(change, false));            builder.withValue(QuoteColumns.ISCURRENT, 1);            if (change.charAt(0) == '-') {                builder.withValue(QuoteColumns.ISUP, 0);            } else {                builder.withValue(QuoteColumns.ISUP, 1);            }            if (bidPrice.equals("0.0")) {                return null;            }        } catch (JSONException e) {            e.printStackTrace();        }        return builder.build();    }    public static String getStocks(String stocks) {        StringBuilder urlStringBuilder = new StringBuilder();        try {            // Base URL for the Yahoo query            urlStringBuilder.append("https://query.yahooapis.com/v1/public/yql?q=");            urlStringBuilder.append(URLEncoder.encode("select * from yahoo.finance.quotes where symbol "                    + "in (" + stocks + ")", "UTF-8"));            urlStringBuilder.append("&format=json&diagnostics=true&env=store%3A%2F%2Fdatatables."                    + "org%2Falltableswithkeys&callback=");        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return urlStringBuilder.toString();    }    public static String getStockDetailUrl(String stock, String startDate, String endDate) {        StringBuilder urlStringBuilder = new StringBuilder();        try {            // Base URL for the Yahoo query            urlStringBuilder.append("https://query.yahooapis.com/v1/public/yql?q=");            urlStringBuilder.append(URLEncoder.encode("select * from yahoo.finance.historicaldata where symbol "                    + " = \"" + stock + "\" and startDate = \""+ startDate+"\" and endDate = \""+endDate +"\"", "UTF-8"));            urlStringBuilder.append("&format=json&diagnostics=true&env=store%3A%2F%2Fdatatables."                    + "org%2Falltableswithkeys&callback=");        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return urlStringBuilder.toString();    }    public static String fetchData(String url) throws IOException {        Request request = new Request.Builder()                .url(url)                .build();        Response response = new OkHttpClient().newCall(request).execute();        return response.body().string();    }    public static String getDate() {        return getDate(new Date().getTime());    }    public static String getDate(long milliseconds) {        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.US);        Date date = new Date();        date.setTime(milliseconds);        return sdf.format(date);    }    public static String getDateLocale(String dateStr) {        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.US);        try {            Date date1 = sdf.parse(dateStr);            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());            return sdf1.format(date1);        } catch (ParseException e) {            e.printStackTrace();        }        return "";    }}